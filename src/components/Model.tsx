/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
This version has been professionally textured for a sleek, realistic look.
*/

import * as THREE from 'three';
import React, { useState, useRef } from 'react';
import { useGLTF } from '@react-three/drei';
import { useFrame } from '@react-three/fiber'
import { useSpring, animated, config } from '@react-spring/three';

import { GLTF } from 'three-stdlib';


import { InteractiveButton } from './Mini-Components/InteractiveButtons.tsx';
import { InteractiveSpinner } from './Mini-Components/SpinningDisk.tsx';


type GLTFResult = GLTF & {
  nodes: {
    Base: THREE.Mesh;
    covering: THREE.Mesh;
    BasePlayer: THREE.Mesh;
    BaseStands: THREE.Mesh;
    BaseButtonsSkip: THREE.Mesh;
    BaseButtonsPause: THREE.Mesh;
    BaseButtonsPlay: THREE.Mesh;
    Table: THREE.Mesh;
    Disk1: THREE.Mesh;
    CDStack: THREE.Mesh;
    CDStack001: THREE.Mesh;
    CDStack002: THREE.Mesh;
    DiskStack: THREE.Mesh;
    PictureFrame: THREE.Mesh;
  };
  materials: {};
};

// A reusable material for the brass accents
const brassMaterial = <meshStandardMaterial color="#b08d57" metalness={0.8} roughness={0.4} />;

export function Model(props: JSX.IntrinsicElements['group']) {
  const { nodes } = useGLTF('/Model.glb') as GLTFResult;

  const [isPinDown, setIsPinDown] = useState(false);
  const [isDiskSpinning, setIsDiskSpinning] = useState(false);

  const initialBasePlayerPosition = nodes.BasePlayer.position;
  const pivotRef = useRef<THREE.Group>(null!); /* <-- Attaching this reference to the mesh */
  useFrame((state, delta) => {
    if (isDiskSpinning && pivotRef.current) {
      pivotRef.current.rotation.y += delta * 1
    }
  }) /* <-- Runs on every frame */

  const { pinY } = useSpring({
    pinY: isPinDown ? initialBasePlayerPosition.y - 0.020 : initialBasePlayerPosition.y,
    config: config.gentle, // A nice, smooth spring configuration
  });

  const handleButtonClick = (buttonName: string) => {
    // console.log(`${buttonName} clicked`);

    if (buttonName === 'Skip') {
      setIsPinDown((prevState) => !prevState); // Toggle the state
      setIsDiskSpinning((prevState) => !prevState);
    }
    if (buttonName === 'Pause') {
      setIsPinDown(false)
      setIsDiskSpinning(false)
    }
    if (buttonName === 'Play') {
      setIsPinDown(true)
      setIsDiskSpinning(true)
    }
  }

  return (
    <group {...props} dispose={null}>
      <group name="Scene">

        {/* --- The Table --- */}
        <mesh name="Table" castShadow receiveShadow geometry={nodes.Table.geometry}>
          {/* A dark, rich wood. High roughness makes it non-glossy, more like stained wood. */}
          <meshStandardMaterial color="#2a1d1d" roughness={0.65} />
        </mesh>

        {/* --- The Record Player --- */}
        <mesh name="Base" castShadow receiveShadow geometry={nodes.Base.geometry}>
          {/* A deep charcoal/off-black. A high roughness value gives it a premium matte finish. */}
          <meshStandardMaterial color="#7a3f3b" roughness={1.8} />
        </mesh>
        <mesh name="covering" castShadow receiveShadow geometry={nodes.covering.geometry}>
          {/* A smoky, dark glass cover. Transparent, but not perfectly clear. */}
          <meshStandardMaterial color="#111111" roughness={0.1} transparent opacity={0.6} />
        </mesh>

        <animated.mesh
          name="BasePlayer"
          castShadow
          receiveShadow
          geometry={nodes.BasePlayer.geometry}
          position-y={pinY}
        >
          <meshStandardMaterial color="#0a0a0a" roughness={0.95} />
        </animated.mesh>

        <InteractiveSpinner
          ref={pivotRef}
          position={[-0.54, 1.38, 0]}
          rotation={[Math.PI / 12, 0, 0]}
          scale={1.81}
        />


        <mesh name="BaseStands" castShadow receiveShadow geometry={nodes.BaseStands.geometry}>
          {brassMaterial}
        </mesh>
        <mesh name="PictureFrame" castShadow receiveShadow geometry={nodes.PictureFrame.geometry}>
          {brassMaterial}
        </mesh>

        {/* --- Buttons, Feet, and Frame (Brushed Brass) --- */}
        <InteractiveButton
          name="BaseButtonsPlay"
          castShadow
          receiveShadow
          geometry={nodes.BaseButtonsPlay.geometry}
          onClick={() => handleButtonClick('Play')}
        />
        <InteractiveButton
          name="BaseButtonsPause"
          castShadow
          receiveShadow
          geometry={nodes.BaseButtonsPause.geometry}
          onClick={() => handleButtonClick('Pause')}
        />
        <InteractiveButton
          name="BaseButtonsSkip"
          castShadow
          receiveShadow
          geometry={nodes.BaseButtonsSkip.geometry}
          onClick={() => handleButtonClick('Skip')}
        />

        {/* --- CD Stacks --- */}
        <mesh name="CDStack" castShadow receiveShadow geometry={nodes.CDStack.geometry}>
          {/* Classic black plastic jewel cases. */}
          <meshStandardMaterial color="#0c2f29" roughness={1.25} />
        </mesh>
        <mesh name="CDStack001" castShadow receiveShadow geometry={nodes.CDStack001.geometry}>
          <meshStandardMaterial color="#0c2f29" roughness={1.25} />
        </mesh>
        <mesh name="CDStack002" castShadow receiveShadow geometry={nodes.CDStack002.geometry}>
          <meshStandardMaterial color="#0c2f29" roughness={1.25} />
        </mesh>
        <mesh name="DiskStack" castShadow receiveShadow geometry={nodes.DiskStack.geometry}>
          {/* The CD itself. Highly metallic and reflective. */}
          <meshStandardMaterial color="#1a1a1a" metalness={0.95} roughness={0.3} />
        </mesh>


        {/* --- Picture Frame --- */}
        <mesh name="PictureFrame" castShadow receiveShadow geometry={nodes.PictureFrame.geometry}>
          {/* A simple, clean white frame to match the player base. */}
          <meshStandardMaterial color="#ffffff" />
        </mesh>

      </group>
    </group >
  );
}

useGLTF.preload('/Model.glb');
